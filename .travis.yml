# Run jobs on container-based infrastructure, can be overridden per job

# Run builds for both master and feature releases

language: python

branches:
  only:
  - master
  # Regex for feature release branches
  - "maintenance/.+"

matrix:
  include:
  # Test osx with RDKit
  - os: osx
    language: generic
    env: PYTHON_VER=3.6 RDKIT=true
  - os: osx
    language: generic
    env: PYTHON_VER=3.7 RDKIT=true

  # Test Linux RDKit compatibility
  - os: linux
    python: 3.6
    env: PYTHON_VER=3.6 RDKIT=true
  - os: linux
    python: 3.7
    env: PYTHON_VER=3.7 RDKIT=true

  # Test Linux OpenEye compatibility
  - os: linux
    python: 3.6
    env: PYTHON_VER=3.6 OPENEYE=true
  - os: linux
    python: 3.7
    env: PYTHON_VER=3.7 OPENEYE=true

  # Test case where both OpenEye and RDKit are installed
  - os: linux
    python: 3.6
    env: PYTHON_VER=3.6 OPENEYE=true RDKIT=true
  - os: linux
    sudo: required
    python: 3.7
    env: PYTHON_VER=3.7 OPENEYE=true RDKIT=true
    
  - os: linux
    env: DANGERBOT=true


env:
  global:
  - OE_LICENSE="$HOME/oe_license.txt"

before_install:
# Additional info about the build
- uname -a
- df -h
- ulimit -a

# If this is just a "Dangerbot" PR-checking build, install+run the bot, then exit
- if [ "$DANGERBOT" == true ]; then 
    rbenv global 2.3.1 && 
    gem install danger --version '~> 5.0' && 
    danger --version && 
    danger && 
    exit ;  fi;

# Install conda and some package management tools
- source devtools/travis-ci/before_install.sh
- python -V

# Unpack encrypted OpenEye license file
- if [ "$TRAVIS_SECURE_ENV_VARS" == true ]; then openssl aes-256-cbc -K $encrypted_4ea8671dd0e3_key
  -iv $encrypted_4ea8671dd0e3_iv -in oe_license.txt.enc -out $OE_LICENSE -d; fi

- if [[ "$OPENEYE" == true && "$TRAVIS_SECURE_ENV_VARS" == false ]]; then echo "OpenEye
  license will not be installed in forks."; fi

install:
# Install the Python environment
- python devtools/scripts/create_conda_env.py -n=test -p=$PYTHON_VER devtools/conda-envs/test_env.yaml
- conda activate test

# Install RDKit
- if [[ "$RDKIT" == true ]]; then conda install --yes -c conda-forge rdkit; fi
- if [[ "$RDKIT" == true ]]; then conda install --yes -c omnia ambermini; fi

# Install OpenEye
- if [[ "$OPENEYE" == true ]]; then conda install -c openeye openeye-toolkits; fi

# Build and install package
- python setup.py develop --no-deps

script:
# Run doctests only if both RDKit and OpenEye are installed.
# examples/check_dataset_parameter_coverage REQURIES rdkit, so skip if it's not available
- if [[ "$RDKIT" == true && "$OPENEYE" == true ]];
  then
    pytest --ignore=utilities --ignore=examples/deprecated --ignore=docs
    --ignore=devtools --doctest-modules --nbval-lax --cov=openforcefield
    --cov-config=setup.cfg;
  elif [[ "$OPENEYE" == true ]];
  then
    pytest --ignore=utilities --ignore=examples/deprecated --ignore=docs
    --ignore=devtools --ignore=examples/check_dataset_parameter_coverage
    --nbval-lax --cov=openforcefield --cov-config=setup.cfg;
  elif [[ "$RDKIT" == true ]];
  then
    pytest --ignore=utilities --ignore=examples/deprecated
    --nbval-lax --cov=openforcefield --cov-config=setup.cfg;
  fi

# Raise a fuss if cron jobs break
notifications:
  email:
    if: type = cron

after_success:
- codecov
